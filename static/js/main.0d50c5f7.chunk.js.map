{"version":3,"sources":["redux/themeReducer.js","components/toggleTheme/ToggleTheme.jsx","redux/dateReducer.js","components/analog/Analog.jsx","components/Calendar/Calendar.jsx","components/digital/Digital.jsx","redux/clockReducer.js","App.js","redux/redux-store.js","index.js"],"names":["CHANGE_THEME","initialState","themes","activeTheme","themeReducer","state","action","type","length","ToggleThemeBtn","props","className","ActiveTheme","onClick","store","dispatch","NEW_DATE","time","Date","dateActionCreator","dateReducer","Analog","setInterval","hh","hour","mm","minute","ss","second","style","transform","months","Calendar","year","month","day","Digital","id","CHANGE_CLOCK","clocks","activeClock","clockReducer","App","getState","getFullYear","monthIndex","getMonth","getDate","getHours","getMinutes","getSeconds","reducers","combineReducers","createStore","reRender","ReactDOM","render","StrictMode","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.0d50c5f7.chunk.js","sourcesContent":["const CHANGE_THEME = \"CHANGE_THEME\"\r\n\r\nlet initialState = {\r\n    themes:[\"dark\",\"light\",\"colorful\"],\r\n    activeTheme:0\r\n}\r\n\r\nconst themeReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case CHANGE_THEME:\r\n            if(state.activeTheme < state.themes.length - 1){\r\n                state.activeTheme++\r\n                return state\r\n            } else {\r\n                state.activeTheme = 0\r\n                return state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const themeChangeActionCreator = () => {\r\n    return{\r\n        type: CHANGE_THEME\r\n    }\r\n}\r\n\r\nexport default themeReducer","import React from \"react\"\r\nimport {themeChangeActionCreator} from \"../../redux/themeReducer\"\r\nimport \"./ToggleTheme.css\"\r\n\r\nfunction ToggleThemeBtn(props){\r\n\r\n    let changeTheme = () => {\r\n        props.store.dispatch(themeChangeActionCreator())\r\n    }\r\n\r\n    return(\r\n        <div className={`toggleClass ${props.ActiveTheme}`} onClick={changeTheme}>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToggleThemeBtn","const NEW_DATE = \"NEW_DATE\"\r\n\r\nlet initialState = {\r\n    time: new Date()\r\n}\r\n\r\nconst dateReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case NEW_DATE:\r\n            state.time = new Date()\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const dateActionCreator = () => {\r\n    return{\r\n        type: NEW_DATE\r\n    }\r\n}\r\n\r\nexport default dateReducer","import React from \"react\"\r\nimport \"./Analog.css\"\r\nimport {dateActionCreator} from \"../../redux/dateReducer\"\r\n\r\nfunction Analog(props){\r\n\r\n    setInterval(() => {props.dispatch(dateActionCreator())},1000)\r\n    \r\n    const deg = 6\r\n    let hh = props.hour * 30\r\n    let mm = props.minute * deg\r\n    let ss = props.second * deg\r\n\r\n    return(\r\n        <div className=\"box\">\r\n            <div className=\"clock analog\">\r\n                <div className=\"hour\">\r\n                    <div className=\"hr\" style={{transform:`rotate(${hh}deg)`}}></div>\r\n                </div>\r\n                <div className=\"min\">\r\n                    <div className=\"mn\" style={{transform:`rotate(${mm}deg)`}}></div>\r\n                </div>\r\n                <div className=\"sec\">\r\n                    <div className=\"sc\" style={{transform:`rotate(${ss}deg)`}}></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Analog","import React from \"react\"\r\nimport \"./Calendar.css\"\r\nimport {dateActionCreator} from \"../../redux/dateReducer\"\r\n\r\nconst months = ['January', \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n\r\nfunction Calendar(props){\r\n\r\n    setInterval(() => {props.dispatch(dateActionCreator())},43200000)\r\n    \r\n    return(\r\n        <div className=\"box calendar\">\r\n            <div className=\"clock\">\r\n                <div className=\"year\">{props.year}</div>\r\n                <div className=\"month\">{months[props.month]}</div>\r\n                <div className=\"day\">{props.day}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calendar","import React from \"react\"\r\nimport \"./Digital.css\"\r\nimport {dateActionCreator} from \"../../redux/dateReducer\"\r\n\r\nfunction Digital(props){\r\n\r\n    let hour = props.hour\r\n    let minute = props.minute\r\n    let second = props.second\r\n    \r\n\r\n    if(hour < 10){\r\n        hour = `0${hour}`\r\n    } else if(minute < 10){\r\n        minute = `0${minute}`\r\n    } else if(props.second < 10){\r\n        second = `0${second}`\r\n    }\r\n\r\n    setInterval(() => {props.dispatch(dateActionCreator())},1000)\r\n\r\n    return(\r\n        <div className=\"box digital\">\r\n            <div className=\"clock\">\r\n                <div className=\"hour\">\r\n                    <div className=\"hr\" id=\"hr\">{hour}</div>\r\n                </div>\r\n                <div className=\"divide\">:</div>\r\n                <div className=\"min\">\r\n                    <div className=\"mn\" id=\"mn\">{minute}</div>\r\n                </div>\r\n                <div className=\"divide\">:</div>\r\n                <div className=\"sec\">\r\n                    <div className=\"sc\" id=\"sc\">{second}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Digital","const CHANGE_CLOCK = \"CHANGE_CLOCK\"\r\n\r\nlet initialState = {\r\n    clocks:['analog', 'digital', 'calendar'],\r\n    activeClock:0\r\n}\r\n\r\nconst clockReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case CHANGE_CLOCK:\r\n            if(state.activeClock < state.clocks.length - 1){\r\n                state.activeClock++\r\n                return state\r\n            } else {\r\n                state.activeClock = 0\r\n                return state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const clockChangeActionCreator = () => {\r\n    return{\r\n        type: CHANGE_CLOCK\r\n    }\r\n}\r\n\r\nexport default clockReducer","import './App.css';\nimport ToggleThemeBtn from \"./components/toggleTheme/ToggleTheme\";\nimport Analog from \"./components/analog/Analog\";\nimport Calendar from \"./components/Calendar/Calendar.jsx\"\nimport Digital from \"./components/digital/Digital.jsx\"\nimport {clockChangeActionCreator} from \"./redux/clockReducer\"\n\nfunction App(props) {\n    let state = props.store.getState()\n    let activeTheme = state.themeReducer.activeTheme\n    let year = state.dateReducer.time.getFullYear()\n    let monthIndex = state.dateReducer.time.getMonth() \n    let day = state.dateReducer.time.getDate()\n\n    let hour = state.dateReducer.time.getHours()\n    let minute = state.dateReducer.time.getMinutes()\n    let second = state.dateReducer.time.getSeconds()\n\n    let dispatch = props.store.dispatch\n\n    let clocks = [\n                <Analog\n                    hour={hour}\n                    minute={minute}\n                    second={second}\n                    dispatch={dispatch}\n                />,\n                <Digital\n                    hour={hour}\n                    minute={minute}\n                    second={second}\n                    dispatch={dispatch}\n                />, \n                <Calendar \n                    year={year}\n                    month={monthIndex}\n                    day={day}\n                    dispatch={dispatch}\n                />\n            ]\n    let ActiveTheme = state.themeReducer.themes[activeTheme]\n\n    let changeClockFunk = () => {\n        props.store.dispatch(clockChangeActionCreator())\n    }\n\n    return (\n        <div className=\"AppWrapper\">\n            <div className={`App ${ActiveTheme}`} onClick={changeClockFunk}>\n                <div className=\"container\">\n                    {clocks[state.clockReducer.activeClock]}\n                </div>\n            </div>\n            <ToggleThemeBtn store={props.store} ActiveTheme={ActiveTheme}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { combineReducers, createStore } from \"redux\";\r\nimport clockReducer from \"./clockReducer\";\r\nimport dateReducer from \"./dateReducer\";\r\nimport themeReducer from \"./themeReducer\"\r\n\r\nlet reducers = combineReducers(\r\n    {\r\n        themeReducer: themeReducer, \r\n        clockReducer: clockReducer,\r\n        dateReducer: dateReducer,\r\n    });\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./redux/redux-store\"\n\nlet reRender = (state) => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App\n                store={store}\n            />\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\n\nreRender(store.getState())\n\nstore.subscribe(() => {\n    let state = store.getState()\n    reRender(state);\n})"],"sourceRoot":""}